.TH "Targetint" 3 2019-03-18 OCamldoc "OCaml library"
.SH NAME
Targetint \- Target processor-native integers.
.SH Module
Module   Targetint
.SH Documentation
.sp
Module
.BI "Targetint"
 : 
.B sig  end

.sp
Target processor\-native integers\&.
.sp
This module provides operations on the type of
signed 32\-bit integers (on 32\-bit target platforms) or
signed 64\-bit integers (on 64\-bit target platforms)\&.
This integer type has exactly the same width as that of a
pointer type in the C compiler\&.  All arithmetic operations over
are taken modulo 2^32 or 2^64 depending
on the word size of the target architecture\&.

.sp

.sp
.sp
.I type t 

.sp
The type of target integers\&.

.sp

.I val zero 
: 
.B t
.sp
The target integer 0\&.

.sp

.I val one 
: 
.B t
.sp
The target integer 1\&.

.sp

.I val minus_one 
: 
.B t
.sp
The target integer \-1\&.

.sp

.I val neg 
: 
.B t -> t
.sp
Unary negation\&.

.sp

.I val add 
: 
.B t -> t -> t
.sp
Addition\&.

.sp

.I val sub 
: 
.B t -> t -> t
.sp
Subtraction\&.

.sp

.I val mul 
: 
.B t -> t -> t
.sp
Multiplication\&.

.sp

.I val div 
: 
.B t -> t -> t
.sp
Integer division\&.  Raise 
.B Division_by_zero
if the second
argument is zero\&.  This division rounds the real quotient of
its arguments towards zero, as specified for 
.B Pervasives\&.(/)
\&.

.sp

.I val rem 
: 
.B t -> t -> t
.sp
Integer remainder\&.  If 
.B y
is not zero, the result
of 
.B Targetint\&.rem x y
satisfies the following properties:
.B Targetint\&.zero <= Nativeint\&.rem x y < Targetint\&.abs y
and
.B x = Targetint\&.add (Targetint\&.mul (Targetint\&.div x y) y)
.B                       (Targetint\&.rem x y)
\&.
If 
.B y = 0
, 
.B Targetint\&.rem x y
raises 
.B Division_by_zero
\&.

.sp

.I val succ 
: 
.B t -> t
.sp
Successor\&.
.B Targetint\&.succ x
is 
.B Targetint\&.add x Targetint\&.one
\&.

.sp

.I val pred 
: 
.B t -> t
.sp
Predecessor\&.
.B Targetint\&.pred x
is 
.B Targetint\&.sub x Targetint\&.one
\&.

.sp

.I val abs 
: 
.B t -> t
.sp
Return the absolute value of its argument\&.

.sp

.I val size 
: 
.B int
.sp
The size in bits of a target native integer\&.

.sp

.I val max_int 
: 
.B t
.sp
The greatest representable target integer,
either 2^31 \- 1 on a 32\-bit platform,
or 2^63 \- 1 on a 64\-bit platform\&.

.sp

.I val min_int 
: 
.B t
.sp
The smallest representable target integer,
either \-2^31 on a 32\-bit platform,
or \-2^63 on a 64\-bit platform\&.

.sp

.I val logand 
: 
.B t -> t -> t
.sp
Bitwise logical and\&.

.sp

.I val logor 
: 
.B t -> t -> t
.sp
Bitwise logical or\&.

.sp

.I val logxor 
: 
.B t -> t -> t
.sp
Bitwise logical exclusive or\&.

.sp

.I val lognot 
: 
.B t -> t
.sp
Bitwise logical negation\&.

.sp

.I val shift_left 
: 
.B t -> int -> t
.sp

.B Targetint\&.shift_left x y
shifts 
.B x
to the left by 
.B y
bits\&.
The result is unspecified if 
.B y < 0
or 
.B y >= bitsize
,
where 
.B bitsize
is 
.B 32
on a 32\-bit platform and
.B 64
on a 64\-bit platform\&.

.sp

.I val shift_right 
: 
.B t -> int -> t
.sp

.B Targetint\&.shift_right x y
shifts 
.B x
to the right by 
.B y
bits\&.
This is an arithmetic shift: the sign bit of 
.B x
is replicated
and inserted in the vacated bits\&.
The result is unspecified if 
.B y < 0
or 
.B y >= bitsize
\&.

.sp

.I val shift_right_logical 
: 
.B t -> int -> t
.sp

.B Targetint\&.shift_right_logical x y
shifts 
.B x
to the right
by 
.B y
bits\&.
This is a logical shift: zeroes are inserted in the vacated bits
regardless of the sign of 
.B x
\&.
The result is unspecified if 
.B y < 0
or 
.B y >= bitsize
\&.

.sp

.I val of_int 
: 
.B int -> t
.sp
Convert the given integer (type 
.B int
) to a target integer
(type 
.B t
), module the target word size\&.

.sp

.I val of_int_exn 
: 
.B int -> t
.sp
Convert the given integer (type 
.B int
) to a target integer
(type 
.B t
)\&.  Raises a fatal error if the conversion is not exact\&.

.sp

.I val to_int 
: 
.B t -> int
.sp
Convert the given target integer (type 
.B t
) to an
integer (type 
.B int
)\&.  The high\-order bit is lost during
the conversion\&.

.sp

.I val of_float 
: 
.B float -> t
.sp
Convert the given floating\-point number to a target integer,
discarding the fractional part (truncate towards 0)\&.
The result of the conversion is undefined if, after truncation,
the number is outside the range
[
.B Targetint\&.min_int
, 
.B Targetint\&.max_int
]\&.

.sp

.I val to_float 
: 
.B t -> float
.sp
Convert the given target integer to a floating\-point number\&.

.sp

.I val of_int32 
: 
.B int32 -> t
.sp
Convert the given 32\-bit integer (type 
.B int32
)
to a target integer\&.

.sp

.I val to_int32 
: 
.B t -> int32
.sp
Convert the given target integer to a
32\-bit integer (type 
.B int32
)\&.  On 64\-bit platforms,
the 64\-bit native integer is taken modulo 2^32,
i\&.e\&. the top 32 bits are lost\&.  On 32\-bit platforms,
the conversion is exact\&.

.sp

.I val of_int64 
: 
.B int64 -> t
.sp
Convert the given 64\-bit integer (type 
.B int64
)
to a target integer\&.

.sp

.I val to_int64 
: 
.B t -> int64
.sp
Convert the given target integer to a
64\-bit integer (type 
.B int64
)\&.

.sp

.I val of_string 
: 
.B string -> t
.sp
Convert the given string to a target integer\&.
The string is read in decimal (by default) or in hexadecimal,
octal or binary if the string begins with 
.B 0x
, 
.B 0o
or 
.B 0b
respectively\&.
Raise 
.B Failure "int_of_string"
if the given string is not
a valid representation of an integer, or if the integer represented
exceeds the range of integers representable in type 
.B nativeint
\&.

.sp

.I val to_string 
: 
.B t -> string
.sp
Return the string representation of its argument, in decimal\&.

.sp

.I val compare 
: 
.B t -> t -> int
.sp
The comparison function for target integers, with the same specification as
.B Pervasives\&.compare
\&.  Along with the type 
.B t
, this function 
.B compare
allows the module 
.B Targetint
to be passed as argument to the functors
.B Set\&.Make
and 
.B Map\&.Make
\&.

.sp

.I val equal 
: 
.B t -> t -> bool
.sp
The equal function for target ints\&.

.sp
.I type repr 
=
 | Int32
.B of 
.B int32
 | Int64
.B of 
.B int64
 
.sp

.sp

.I val repr 
: 
.B t -> repr
.sp
The concrete representation of a native integer\&.

.sp
