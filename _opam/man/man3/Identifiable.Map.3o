.TH "Identifiable.Map" 3 2019-03-18 OCamldoc "OCaml library"
.SH NAME
Identifiable.Map \- no description
.SH Module type
Module type   Identifiable.Map
.SH Documentation
.sp
Module type
.BI "Map"
 = 
.B sig  end

.sp

.sp

.sp
.sp
.I module T : 
.B Map.OrderedType

.sp

.sp
.I include Map.S
.sp

.sp

.I val filter_map 
: 
.B 'a t -> f:(key -> 'a -> 'b option) -> 'b t
.sp

.sp

.I val of_list 
: 
.B (key * 'a) list -> 'a t
.sp

.sp

.I val disjoint_union 
: 
.B ?eq:('a -> 'a -> bool) ->
.B   ?print:(Format.formatter -> 'a -> unit) -> 'a t -> 'a t -> 'a t
.sp

.B disjoint_union m1 m2
contains all bindings from 
.B m1
and
.B m2
\&. If some binding is present in both and the associated
value is not equal, a Fatal_error is raised

.sp

.I val union_right 
: 
.B 'a t -> 'a t -> 'a t
.sp

.B union_right m1 m2
contains all bindings from 
.B m1
and 
.B m2
\&. If
some binding is present in both, the one from 
.B m2
is taken

.sp

.I val union_left 
: 
.B 'a t -> 'a t -> 'a t
.sp

.B union_left m1 m2 = union_right m2 m1


.sp

.I val union_merge 
: 
.B ('a -> 'a -> 'a) -> 'a t -> 'a t -> 'a t
.sp

.sp

.I val rename 
: 
.B key t -> key -> key
.sp

.sp

.I val map_keys 
: 
.B (key -> key) -> 'a t -> 'a t
.sp

.sp

.I val keys 
: 
.B 'a t -> Set.Make(T).t
.sp

.sp

.I val data 
: 
.B 'a t -> 'a list
.sp

.sp

.I val of_set 
: 
.B (key -> 'a) -> Set.Make(T).t -> 'a t
.sp

.sp

.I val transpose_keys_and_data 
: 
.B key t -> key t
.sp

.sp

.I val transpose_keys_and_data_set 
: 
.B key t -> Set.Make(T).t t
.sp

.sp

.I val print 
: 
.B (Format.formatter -> 'a -> unit) -> Format.formatter -> 'a t -> unit
.sp

.sp
