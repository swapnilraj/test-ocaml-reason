.TH "Clflags" 3 2019-03-18 OCamldoc "OCaml library"
.SH NAME
Clflags \- Command line flags
.SH Module
Module   Clflags
.SH Documentation
.sp
Module
.BI "Clflags"
 : 
.B sig  end

.sp
Command line flags

.sp

.sp
.sp
.I module Int_arg_helper : 
.B sig  end

.sp
Optimization parameters represented as ints indexed by round number\&.

.sp
.I module Float_arg_helper : 
.B sig  end

.sp
Optimization parameters represented as floats indexed by round number\&.

.sp
.I type inlining_arguments 
= {
 inline_call_cost : 
.B int option
;
 inline_alloc_cost : 
.B int option
;
 inline_prim_cost : 
.B int option
;
 inline_branch_cost : 
.B int option
;
 inline_indirect_cost : 
.B int option
;
 inline_lifting_benefit : 
.B int option
;
 inline_branch_factor : 
.B float option
;
 inline_max_depth : 
.B int option
;
 inline_max_unroll : 
.B int option
;
 inline_threshold : 
.B float option
;
 inline_toplevel_threshold : 
.B int option
;
 }

.sp

.sp

.I val classic_arguments 
: 
.B inlining_arguments
.sp

.sp

.I val o1_arguments 
: 
.B inlining_arguments
.sp

.sp

.I val o2_arguments 
: 
.B inlining_arguments
.sp

.sp

.I val o3_arguments 
: 
.B inlining_arguments
.sp

.sp

.I val use_inlining_arguments_set 
: 
.B ?round:int -> inlining_arguments -> unit
.sp
Set all the inlining arguments for a round\&.
The default is set if no round is provided\&.

.sp

.I val objfiles 
: 
.B string list Pervasives.ref
.sp

.sp

.I val ccobjs 
: 
.B string list Pervasives.ref
.sp

.sp

.I val dllibs 
: 
.B string list Pervasives.ref
.sp

.sp

.I val compile_only 
: 
.B bool Pervasives.ref
.sp

.sp

.I val output_name 
: 
.B string option Pervasives.ref
.sp

.sp

.I val include_dirs 
: 
.B string list Pervasives.ref
.sp

.sp

.I val no_std_include 
: 
.B bool Pervasives.ref
.sp

.sp

.I val print_types 
: 
.B bool Pervasives.ref
.sp

.sp

.I val make_archive 
: 
.B bool Pervasives.ref
.sp

.sp

.I val debug 
: 
.B bool Pervasives.ref
.sp

.sp

.I val fast 
: 
.B bool Pervasives.ref
.sp

.sp

.I val use_linscan 
: 
.B bool Pervasives.ref
.sp

.sp

.I val link_everything 
: 
.B bool Pervasives.ref
.sp

.sp

.I val custom_runtime 
: 
.B bool Pervasives.ref
.sp

.sp

.I val no_check_prims 
: 
.B bool Pervasives.ref
.sp

.sp

.I val bytecode_compatible_32 
: 
.B bool Pervasives.ref
.sp

.sp

.I val output_c_object 
: 
.B bool Pervasives.ref
.sp

.sp

.I val output_complete_object 
: 
.B bool Pervasives.ref
.sp

.sp

.I val all_ccopts 
: 
.B string list Pervasives.ref
.sp

.sp

.I val classic 
: 
.B bool Pervasives.ref
.sp

.sp

.I val nopervasives 
: 
.B bool Pervasives.ref
.sp

.sp

.I val open_modules 
: 
.B string list Pervasives.ref
.sp

.sp

.I val preprocessor 
: 
.B string option Pervasives.ref
.sp

.sp

.I val all_ppx 
: 
.B string list Pervasives.ref
.sp

.sp

.I val annotations 
: 
.B bool Pervasives.ref
.sp

.sp

.I val binary_annotations 
: 
.B bool Pervasives.ref
.sp

.sp

.I val use_threads 
: 
.B bool Pervasives.ref
.sp

.sp

.I val use_vmthreads 
: 
.B bool Pervasives.ref
.sp

.sp

.I val noassert 
: 
.B bool Pervasives.ref
.sp

.sp

.I val verbose 
: 
.B bool Pervasives.ref
.sp

.sp

.I val noprompt 
: 
.B bool Pervasives.ref
.sp

.sp

.I val nopromptcont 
: 
.B bool Pervasives.ref
.sp

.sp

.I val init_file 
: 
.B string option Pervasives.ref
.sp

.sp

.I val noinit 
: 
.B bool Pervasives.ref
.sp

.sp

.I val noversion 
: 
.B bool Pervasives.ref
.sp

.sp

.I val use_prims 
: 
.B string Pervasives.ref
.sp

.sp

.I val use_runtime 
: 
.B string Pervasives.ref
.sp

.sp

.I val principal 
: 
.B bool Pervasives.ref
.sp

.sp

.I val real_paths 
: 
.B bool Pervasives.ref
.sp

.sp

.I val recursive_types 
: 
.B bool Pervasives.ref
.sp

.sp

.I val strict_sequence 
: 
.B bool Pervasives.ref
.sp

.sp

.I val strict_formats 
: 
.B bool Pervasives.ref
.sp

.sp

.I val applicative_functors 
: 
.B bool Pervasives.ref
.sp

.sp

.I val make_runtime 
: 
.B bool Pervasives.ref
.sp

.sp

.I val gprofile 
: 
.B bool Pervasives.ref
.sp

.sp

.I val c_compiler 
: 
.B string option Pervasives.ref
.sp

.sp

.I val no_auto_link 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dllpaths 
: 
.B string list Pervasives.ref
.sp

.sp

.I val make_package 
: 
.B bool Pervasives.ref
.sp

.sp

.I val for_package 
: 
.B string option Pervasives.ref
.sp

.sp

.I val error_size 
: 
.B int Pervasives.ref
.sp

.sp

.I val float_const_prop 
: 
.B bool Pervasives.ref
.sp

.sp

.I val transparent_modules 
: 
.B bool Pervasives.ref
.sp

.sp

.I val unique_ids 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_source 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_parsetree 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_typedtree 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_rawlambda 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_lambda 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_rawclambda 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_clambda 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_rawflambda 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_flambda 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_flambda_let 
: 
.B int option Pervasives.ref
.sp

.sp

.I val dump_instr 
: 
.B bool Pervasives.ref
.sp

.sp

.I val keep_asm_file 
: 
.B bool Pervasives.ref
.sp

.sp

.I val optimize_for_speed 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_cmm 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_selection 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_cse 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_live 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_avail 
: 
.B bool Pervasives.ref
.sp

.sp

.I val debug_runavail 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_spill 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_split 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_interf 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_prefer 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_regalloc 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_reload 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_scheduling 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_linear 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_interval 
: 
.B bool Pervasives.ref
.sp

.sp

.I val keep_startup_file 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_combine 
: 
.B bool Pervasives.ref
.sp

.sp

.I val native_code 
: 
.B bool Pervasives.ref
.sp

.sp

.I val default_inline_threshold 
: 
.B float
.sp

.sp

.I val inline_threshold 
: 
.B Float_arg_helper.parsed Pervasives.ref
.sp

.sp

.I val inlining_report 
: 
.B bool Pervasives.ref
.sp

.sp

.I val simplify_rounds 
: 
.B int option Pervasives.ref
.sp

.sp

.I val default_simplify_rounds 
: 
.B int Pervasives.ref
.sp

.sp

.I val rounds 
: 
.B unit -> int
.sp

.sp

.I val default_inline_max_unroll 
: 
.B int
.sp

.sp

.I val inline_max_unroll 
: 
.B Int_arg_helper.parsed Pervasives.ref
.sp

.sp

.I val default_inline_toplevel_threshold 
: 
.B int
.sp

.sp

.I val inline_toplevel_threshold 
: 
.B Int_arg_helper.parsed Pervasives.ref
.sp

.sp

.I val default_inline_call_cost 
: 
.B int
.sp

.sp

.I val default_inline_alloc_cost 
: 
.B int
.sp

.sp

.I val default_inline_prim_cost 
: 
.B int
.sp

.sp

.I val default_inline_branch_cost 
: 
.B int
.sp

.sp

.I val default_inline_indirect_cost 
: 
.B int
.sp

.sp

.I val default_inline_lifting_benefit 
: 
.B int
.sp

.sp

.I val inline_call_cost 
: 
.B Int_arg_helper.parsed Pervasives.ref
.sp

.sp

.I val inline_alloc_cost 
: 
.B Int_arg_helper.parsed Pervasives.ref
.sp

.sp

.I val inline_prim_cost 
: 
.B Int_arg_helper.parsed Pervasives.ref
.sp

.sp

.I val inline_branch_cost 
: 
.B Int_arg_helper.parsed Pervasives.ref
.sp

.sp

.I val inline_indirect_cost 
: 
.B Int_arg_helper.parsed Pervasives.ref
.sp

.sp

.I val inline_lifting_benefit 
: 
.B Int_arg_helper.parsed Pervasives.ref
.sp

.sp

.I val default_inline_branch_factor 
: 
.B float
.sp

.sp

.I val inline_branch_factor 
: 
.B Float_arg_helper.parsed Pervasives.ref
.sp

.sp

.I val dont_write_files 
: 
.B bool Pervasives.ref
.sp

.sp

.I val std_include_flag 
: 
.B string -> string
.sp

.sp

.I val std_include_dir 
: 
.B unit -> string list
.sp

.sp

.I val shared 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dlcode 
: 
.B bool Pervasives.ref
.sp

.sp

.I val pic_code 
: 
.B bool Pervasives.ref
.sp

.sp

.I val runtime_variant 
: 
.B string Pervasives.ref
.sp

.sp

.I val force_slash 
: 
.B bool Pervasives.ref
.sp

.sp

.I val keep_docs 
: 
.B bool Pervasives.ref
.sp

.sp

.I val keep_locs 
: 
.B bool Pervasives.ref
.sp

.sp

.I val unsafe_string 
: 
.B bool Pervasives.ref
.sp

.sp

.I val opaque 
: 
.B bool Pervasives.ref
.sp

.sp

.I val profile_columns 
: 
.B Profile.column list Pervasives.ref
.sp

.sp

.I val flambda_invariant_checks 
: 
.B bool Pervasives.ref
.sp

.sp

.I val unbox_closures 
: 
.B bool Pervasives.ref
.sp

.sp

.I val unbox_closures_factor 
: 
.B int Pervasives.ref
.sp

.sp

.I val default_unbox_closures_factor 
: 
.B int
.sp

.sp

.I val unbox_free_vars_of_closures 
: 
.B bool Pervasives.ref
.sp

.sp

.I val unbox_specialised_args 
: 
.B bool Pervasives.ref
.sp

.sp

.I val clambda_checks 
: 
.B bool Pervasives.ref
.sp

.sp

.I val default_inline_max_depth 
: 
.B int
.sp

.sp

.I val inline_max_depth 
: 
.B Int_arg_helper.parsed Pervasives.ref
.sp

.sp

.I val remove_unused_arguments 
: 
.B bool Pervasives.ref
.sp

.sp

.I val dump_flambda_verbose 
: 
.B bool Pervasives.ref
.sp

.sp

.I val classic_inlining 
: 
.B bool Pervasives.ref
.sp

.sp

.I val afl_instrument 
: 
.B bool Pervasives.ref
.sp

.sp

.I val afl_inst_ratio 
: 
.B int Pervasives.ref
.sp

.sp

.I val all_passes 
: 
.B string list Pervasives.ref
.sp

.sp

.I val dumped_pass 
: 
.B string -> bool
.sp

.sp

.I val set_dumped_pass 
: 
.B string -> bool -> unit
.sp

.sp

.I val parse_color_setting 
: 
.B string -> Misc.Color.setting option
.sp

.sp

.I val color 
: 
.B Misc.Color.setting option Pervasives.ref
.sp

.sp

.I val unboxed_types 
: 
.B bool Pervasives.ref
.sp

.sp

.I val arg_spec 
: 
.B (string * Arg.spec * string) list Pervasives.ref
.sp

.sp

.I val add_arguments 
: 
.B string -> (string * Arg.spec * string) list -> unit
.sp

.sp

.I val parse_arguments 
: 
.B Arg.anon_fun -> string -> unit
.sp

.sp

.I val print_arguments 
: 
.B string -> unit
.sp

.sp

.I val reset_arguments 
: 
.B unit -> unit
.sp

.sp
